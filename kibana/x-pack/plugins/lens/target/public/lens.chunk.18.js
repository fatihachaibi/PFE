/*! Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one or more contributor license agreements. 
 * Licensed under the Elastic License 2.0; you may not use this file except in compliance with the Elastic License 2.0. */
(window.lens_bundle_jsonpfunction=window.lens_bundle_jsonpfunction||[]).push([[18],{74:function(t,e,n){"use strict";n.r(e),n.d(e,"getVisualizeGeoFieldMessage",(function(){return i})),n.d(e,"getResolvedDateRange",(function(){return c})),n.d(e,"containsDynamicMath",(function(){return l})),n.d(e,"getTimeZone",(function(){return d})),n.d(e,"getActiveDatasourceIdFromDoc",(function(){return f})),n.d(e,"getInitialDatasourceId",(function(){return g})),n.d(e,"handleIndexPatternChange",(function(){return m})),n.d(e,"refreshIndexPatternsList",(function(){return v})),n.d(e,"getIndexPatternsIds",(function(){return I})),n.d(e,"getIndexPatternsObjects",(function(){return p})),n.d(e,"getRemoveOperation",(function(){return b})),n.d(e,"inferTimeField",(function(){return x}));var a=n(31),r=n(0),o=n(41),u=n.n(o),s=n(12);function i(t){return r.i18n.translate("xpack.lens.visualizeGeoFieldMessage",{defaultMessage:"Lens cannot visualize {fieldType} fields",values:{fieldType:t}})}const c=function(t){const{from:e,to:n}=t.getTime(),{min:a,max:r}=t.calculateBounds({from:e,to:n});return{fromDate:(null==a?void 0:a.toISOString())||e,toDate:(null==r?void 0:r.toISOString())||n}};function l(t){return t.includes("now")}function d(t){const e=t.get("dateFormat:tz");return"Browser"===e?u.a.tz.guess():e}function f(t){if(!t)return null;const[e]=Object.keys(t.state.datasourceStates);return e||null}const g=(t,e)=>e&&f(e)||Object.keys(t)[0]||null;function m({activeDatasources:t,datasourceStates:e,indexPatternId:n,setDatasourceState:a}){Object.entries(t).forEach((([t,r])=>{var o;null==r||null===(o=r.updateCurrentIndexPatternId)||void 0===o||o.call(r,{state:e[t].state,indexPatternId:n,setState:a})}))}function v({activeDatasources:t,indexPatternId:e,setDatasourceState:n}){Object.entries(t).forEach((([t,a])=>{var r;null==a||null===(r=a.refreshIndexPatternsList)||void 0===r||r.call(a,{indexPatternId:e,setState:n})}))}function I({activeDatasources:t,datasourceStates:e}){let n;const r=[];Object.entries(t).forEach((([t,a])=>{const{savedObjectReferences:o}=a.getPersistableState(e[t].state),u=a.getCurrentIndexPatternId(e[t].state);n=u,r.push(...o)}));const o=r.filter((({type:t})=>"index-pattern"===t)).map((({id:t})=>t));return n&&o.unshift(n),Object(a.uniq)(o)}async function p(t,e){const n=await Promise.allSettled(t.map((t=>e.get(t)))),a=n.filter((t=>"fulfilled"===t.status)),r=n.map(((e,n)=>t[n])).filter(((t,e)=>"rejected"===n[e].status));return{indexPatterns:a.map((t=>t.value)),rejectedIds:r}}function b(t,e,n,a){return t.getRemoveOperation?t.getRemoveOperation(e,n):1===a?"clear":"remove"}function x(t){return("table"in t?[{table:t.table,column:t.column}]:t.negate?[]:t.data).map((({table:t,column:e})=>{var n;const a=t.columns[e];if(Boolean(a&&(null===(n=s.search.aggs.getDateHistogramMetaDataByDatatableColumn(a))||void 0===n?void 0:n.timeRange)))return a.meta.field})).find(Boolean)}}}]);