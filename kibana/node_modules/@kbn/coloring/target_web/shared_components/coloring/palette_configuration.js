import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
import { i18n } from '@kbn/i18n';
import React, { useReducer, useMemo } from 'react';
import useDebounce from 'react-use/lib/useDebounce';
import { css } from '@emotion/react';
import { EuiFormRow, htmlIdGenerator, EuiButtonGroup, EuiIconTip, useEuiTheme } from '@elastic/eui';
import { PalettePicker } from './palette_picker';
import { getFallbackDataBounds } from '../../palettes';
import { toColorRanges } from './utils';
import { ColorRanges, ColorRangesContext } from './color_ranges';
import { isAllColorRangesValid } from './color_ranges/color_ranges_validation';
import { paletteConfigurationReducer } from './palette_configuration_reducer';
import { jsx as ___EmotionJSX } from "@emotion/react";
export var CustomizablePalette = function CustomizablePalette(_ref) {
  var _activePalette$params, _activePalette$params2, _localState$activePal, _localState$activePal2, _localState$activePal3;

  var palettes = _ref.palettes,
      activePalette = _ref.activePalette,
      setPalette = _ref.setPalette,
      _ref$dataBounds = _ref.dataBounds,
      dataBounds = _ref$dataBounds === void 0 ? getFallbackDataBounds((_activePalette$params = activePalette.params) === null || _activePalette$params === void 0 ? void 0 : _activePalette$params.rangeType) : _ref$dataBounds,
      _ref$showExtraActions = _ref.showExtraActions,
      showExtraActions = _ref$showExtraActions === void 0 ? true : _ref$showExtraActions,
      _ref$showRangeTypeSel = _ref.showRangeTypeSelector,
      showRangeTypeSelector = _ref$showRangeTypeSel === void 0 ? true : _ref$showRangeTypeSel,
      _ref$disableSwitching = _ref.disableSwitchingContinuity,
      disableSwitchingContinuity = _ref$disableSwitching === void 0 ? false : _ref$disableSwitching;
  var idPrefix = useMemo(function () {
    return htmlIdGenerator()();
  }, []);
  var colorRangesToShow = toColorRanges(palettes, ((_activePalette$params2 = activePalette.params) === null || _activePalette$params2 === void 0 ? void 0 : _activePalette$params2.colorStops) || [], activePalette, dataBounds);

  var _useReducer = useReducer(paletteConfigurationReducer, {
    activePalette: activePalette,
    colorRanges: colorRangesToShow
  }),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      localState = _useReducer2[0],
      dispatch = _useReducer2[1];

  useDebounce(function () {
    if ((localState.activePalette !== activePalette || colorRangesToShow !== localState.colorRanges) && isAllColorRangesValid(localState.colorRanges)) {
      setPalette(localState.activePalette);
    }
  }, 250, [localState]);

  var _useEuiTheme = useEuiTheme(),
      euiTheme = _useEuiTheme.euiTheme;

  var styles = useMemo(function () {
    return /*#__PURE__*/css("padding:", euiTheme.size.base, ";background-color:", euiTheme.colors.lightestShade, ";border-bottom:", euiTheme.border.thin, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:palette_configuration--styles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  }, [euiTheme.size.base, euiTheme.colors.lightestShade, euiTheme.border.thin]);
  return ___EmotionJSX("div", {
    css: styles,
    className: "lnsPalettePanel__section"
  }, ___EmotionJSX(EuiFormRow, {
    display: "rowCompressed",
    label: i18n.translate('coloring.dynamicColoring.palettePicker.label', {
      defaultMessage: 'Color palette'
    }),
    fullWidth: true
  }, ___EmotionJSX(PalettePicker, {
    "data-test-subj": "lnsPalettePanel_dynamicColoring_palette_picker",
    palettes: palettes,
    activePalette: localState.activePalette,
    setPalette: function setPalette(newPalette) {
      var isPaletteChanged = newPalette.name !== activePalette.name;

      if (isPaletteChanged) {
        dispatch({
          type: 'changeColorPalette',
          payload: {
            palette: newPalette,
            dataBounds: dataBounds,
            palettes: palettes,
            disableSwitchingContinuity: disableSwitchingContinuity
          }
        });
      }
    },
    showCustomPalette: true,
    showDynamicColorOnly: true
  })), showRangeTypeSelector && ___EmotionJSX(EuiFormRow, {
    label: ___EmotionJSX(React.Fragment, null, i18n.translate('coloring.dynamicColoring.rangeType.label', {
      defaultMessage: 'Value type'
    }), ' ', ___EmotionJSX(EuiIconTip, {
      content: i18n.translate('coloring.dynamicColoring.customPalette.colorStopsHelpPercentage', {
        defaultMessage: 'Percent value types are relative to the full range of available data values.'
      }),
      position: "top",
      size: "s"
    })),
    display: "rowCompressed"
  }, ___EmotionJSX(EuiButtonGroup, {
    legend: i18n.translate('coloring.dynamicColoring.rangeType.label', {
      defaultMessage: 'Value type'
    }),
    "data-test-subj": "lnsPalettePanel_dynamicColoring_custom_range_groups",
    name: "dynamicColoringRangeType",
    buttonSize: "compressed",
    options: [{
      id: "".concat(idPrefix, "percent"),
      label: i18n.translate('coloring.dynamicColoring.rangeType.percent', {
        defaultMessage: 'Percent'
      }),
      'data-test-subj': 'lnsPalettePanel_dynamicColoring_rangeType_groups_percent'
    }, {
      id: "".concat(idPrefix, "number"),
      label: i18n.translate('coloring.dynamicColoring.rangeType.number', {
        defaultMessage: 'Number'
      }),
      'data-test-subj': 'lnsPalettePanel_dynamicColoring_rangeType_groups_number'
    }],
    idSelected: (_localState$activePal = localState.activePalette.params) !== null && _localState$activePal !== void 0 && _localState$activePal.rangeType ? "".concat(idPrefix).concat((_localState$activePal2 = localState.activePalette.params) === null || _localState$activePal2 === void 0 ? void 0 : _localState$activePal2.rangeType) : "".concat(idPrefix, "percent"),
    onChange: function onChange(id) {
      var newRangeType = id.replace(idPrefix, '');
      dispatch({
        type: 'updateRangeType',
        payload: {
          rangeType: newRangeType,
          dataBounds: dataBounds,
          palettes: palettes
        }
      });
    },
    isFullWidth: true
  })), ___EmotionJSX(EuiFormRow, {
    label: i18n.translate('coloring.dynamicColoring.palettePicker.colorRangesLabel', {
      defaultMessage: 'Color Ranges'
    }),
    display: "rowCompressed",
    fullWidth: true
  }, ___EmotionJSX(ColorRangesContext.Provider, {
    value: {
      dataBounds: dataBounds,
      palettes: palettes,
      disableSwitchingContinuity: disableSwitchingContinuity
    }
  }, ___EmotionJSX(ColorRanges, {
    showExtraActions: showExtraActions,
    paletteConfiguration: (_localState$activePal3 = localState.activePalette) === null || _localState$activePal3 === void 0 ? void 0 : _localState$activePal3.params,
    colorRanges: localState.colorRanges,
    dispatch: dispatch
  }))));
};