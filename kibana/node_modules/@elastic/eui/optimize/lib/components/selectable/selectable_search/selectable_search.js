"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiSelectableSearch = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _form = require("../../form");

var _matching_options = require("../matching_options");

var _react2 = require("@emotion/react");

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
var EuiSelectableSearch = function EuiSelectableSearch(_ref) {
  var onChangeCallback = _ref.onChange,
      options = _ref.options,
      value = _ref.value,
      placeholder = _ref.placeholder,
      isPreFiltered = _ref.isPreFiltered,
      listId = _ref.listId,
      className = _ref.className,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["onChange", "options", "value", "placeholder", "isPreFiltered", "listId", "className"]);
  (0, _react.useEffect)(function () {
    var matchingOptions = (0, _matching_options.getMatchingOptions)(options, value, isPreFiltered);
    onChangeCallback(value, matchingOptions); // Call on mount only
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  var onChange = (0, _react.useCallback)(function (e) {
    var searchValue = e.target.value;
    var matchingOptions = (0, _matching_options.getMatchingOptions)(options, searchValue, isPreFiltered);
    onChangeCallback(searchValue, matchingOptions);
  }, [options, isPreFiltered, onChangeCallback]);
  var classes = (0, _classnames.default)('euiSelectableSearch', className);
  var ariaPropsIfListIsPresent = listId ? {
    role: 'combobox',
    'aria-autocomplete': 'list',
    'aria-expanded': true,
    'aria-controls': listId,
    'aria-owns': listId // legacy attribute but shims support for nearly everything atm

  } : undefined;
  return (0, _react2.jsx)(_form.EuiFieldSearch, (0, _extends2.default)({
    className: classes,
    placeholder: placeholder,
    value: value,
    onChange: onChange,
    incremental: true,
    fullWidth: true,
    autoComplete: "off",
    "aria-haspopup": "listbox"
  }, ariaPropsIfListIsPresent, rest));
};

exports.EuiSelectableSearch = EuiSelectableSearch;