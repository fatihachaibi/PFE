/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
import { useEuiTheme } from '../../../../services/theme';
import { getShadowColor } from '../functions';
import { createStyleHookFromMixin } from '../../../../global_styling/utils';

/**
 * euiSlightShadow
 */
export var euiShadowXSmall = function euiShadowXSmall(_ref) {
  var colors = _ref.colors;

  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _color = _ref2.color;

  var colorMode = arguments.length > 2 ? arguments[2] : undefined;
  var color = _color || colors.shadow;
  return "\nbox-shadow:\n  0 .8px .8px ".concat(getShadowColor(color, 0.04, colorMode), ",\n  0 2.3px 2px ").concat(getShadowColor(color, 0.03, colorMode), ";\n");
};
/**
 * bottomShadowSmall
 */

export var euiShadowSmall = function euiShadowSmall(_ref3) {
  var colors = _ref3.colors;

  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _color = _ref4.color;

  var colorMode = arguments.length > 2 ? arguments[2] : undefined;
  var color = _color || colors.shadow;
  return "\nbox-shadow:\n  0 .7px 1.4px ".concat(getShadowColor(color, 0.07, colorMode), ",\n  0 1.9px 4px ").concat(getShadowColor(color, 0.05, colorMode), ",\n  0 4.5px 10px ").concat(getShadowColor(color, 0.05, colorMode), ";\n");
};
/**
 * bottomShadowMedium
 */

export var euiShadowMedium = function euiShadowMedium(_ref5) {
  var colors = _ref5.colors;

  var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _color = _ref6.color;

  var colorMode = arguments.length > 2 ? arguments[2] : undefined;
  var color = _color || colors.shadow;
  return "\nbox-shadow:\n  0 .9px 4px -1px ".concat(getShadowColor(color, 0.08, colorMode), ",\n  0 2.6px 8px -1px ").concat(getShadowColor(color, 0.06, colorMode), ",\n  0 5.7px 12px -1px ").concat(getShadowColor(color, 0.05, colorMode), ",\n  0 15px 15px -1px ").concat(getShadowColor(color, 0.04, colorMode), ";\n");
};
/**
 * bottomShadow
 */

export var euiShadowLarge = function euiShadowLarge(_ref7) {
  var colors = _ref7.colors;

  var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _color = _ref8.color;

  var colorMode = arguments.length > 2 ? arguments[2] : undefined;
  var color = _color || colors.shadow;
  return "\nbox-shadow:\n  0 1px 5px ".concat(getShadowColor(color, 0.1, colorMode), ",\n  0 3.6px 13px ").concat(getShadowColor(color, 0.07, colorMode), ",\n  0 8.4px 23px ").concat(getShadowColor(color, 0.06, colorMode), ",\n  0 23px 35px ").concat(getShadowColor(color, 0.05, colorMode), ";\n");
};
/**
 * bottomShadowLarge
 */

export var euiShadowXLarge = function euiShadowXLarge(_ref9) {
  var colors = _ref9.colors;

  var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _color = _ref10.color,
      reverse = _ref10.reverse;

  var colorMode = arguments.length > 2 ? arguments[2] : undefined;
  var color = _color || colors.shadow;
  return "\nbox-shadow:\n  0 ".concat(reverse ? '-' : '', "2.7px 9px ").concat(getShadowColor(color, 0.13, colorMode), ",\n  0 ").concat(reverse ? '-' : '', "9.4px 24px ").concat(getShadowColor(color, 0.09, colorMode), ",\n  0 ").concat(reverse ? '-' : '', "21.8px 43px ").concat(getShadowColor(color, 0.08, colorMode), ";\n");
};
/**
 * slightShadowHover
 * TODO: I think this is only used by panels/cards in the Amsterdam theme, move there
 */

export var euiSlightShadowHover = function euiSlightShadowHover(_ref11) {
  var colors = _ref11.colors;

  var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _color = _ref12.color;

  var colorMode = arguments.length > 2 ? arguments[2] : undefined;
  var color = _color || colors.shadow;
  return "\nbox-shadow:\n  0 1px 5px ".concat(getShadowColor(color, 0.1, colorMode), ",\n  0 3.6px 13px ").concat(getShadowColor(color, 0.07, colorMode), ",\n  0 8.4px 23px ").concat(getShadowColor(color, 0.06, colorMode), ",\n  0 23px 35px ").concat(getShadowColor(color, 0.05, colorMode), ";\n");
};
export var useEuiSlightShadowHover = createStyleHookFromMixin(euiSlightShadowHover);
/**
 * bottomShadowFlat
 *
 * Similar to shadow medium but without the bottom depth.
 * Useful for popovers that drop UP rather than DOWN.
 */

export var euiShadowFlat = function euiShadowFlat(_ref13) {
  var colors = _ref13.colors;
  var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  var colorMode = arguments.length > 2 ? arguments[2] : undefined;

  var _color = color || colors.shadow;

  return "\nbox-shadow:\n  0 0 .8px ".concat(getShadowColor(_color, 0.06, colorMode), ",\n  0 0 2px ").concat(getShadowColor(_color, 0.04, colorMode), ",\n  0 0 5px ").concat(getShadowColor(_color, 0.04, colorMode), ",\n  0 0 17px ").concat(getShadowColor(_color, 0.03, colorMode), ";\n");
};
export var useEuiShadowFlat = createStyleHookFromMixin(euiShadowFlat); // One hook to rule them all

export var euiShadow = function euiShadow(euiTheme) {
  var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref14$size = _ref14.size,
      size = _ref14$size === void 0 ? 'l' : _ref14$size,
      _ref14$color = _ref14.color,
      color = _ref14$color === void 0 ? undefined : _ref14$color;

  var colorMode = arguments.length > 2 ? arguments[2] : undefined;

  switch (size) {
    case 'xs':
      return euiShadowXSmall(euiTheme, {
        color: color
      }, colorMode);

    case 's':
      return euiShadowSmall(euiTheme, {
        color: color
      }, colorMode);

    case 'm':
      return euiShadowMedium(euiTheme, {
        color: color
      }, colorMode);

    case 'l':
      return euiShadowLarge(euiTheme, {
        color: color
      }, colorMode);

    case 'xl':
      return euiShadowXLarge(euiTheme, {
        color: color
      }, colorMode);

    default:
      console.warn('Please provide a valid size option to useEuiShadow');
      return '';
  }
};
export var useEuiShadow = function useEuiShadow() {
  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'l';
  var color = arguments.length > 1 ? arguments[1] : undefined;

  var _useEuiTheme = useEuiTheme(),
      euiTheme = _useEuiTheme.euiTheme,
      colorMode = _useEuiTheme.colorMode;

  return euiShadow(euiTheme, {
    size: size,
    color: color
  }, colorMode);
};