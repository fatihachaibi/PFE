"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.euiFontSizeFromScale = euiFontSizeFromScale;
exports.euiLineHeightFromBaseline = euiLineHeightFromBaseline;

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/**
 * Calculates the font-size value based on the provided scale key
 * @param scale - The font scale key
 * @param theme - Requires the `base` and `font` keys
 * @param measurement - The returned string measurement
 * *
 * @returns string - Calculated font-size value
 */
function euiFontSizeFromScale(scale, _ref) {
  var base = _ref.base,
      font = _ref.font;
  var measurement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'rem';

  if (measurement === 'em') {
    return "".concat(font.scale[scale], "em");
  }

  var numerator = base * font.scale[scale];
  var denominator = base * font.scale[font.body.scale];
  return measurement === 'px' ? "".concat(numerator, "px") : "".concat((numerator / denominator).toFixed(4), "rem");
}
/**
 * Calculates the line-height to the closest multiple of the baseline
 * EX: A proper line-height for text is 1.5 times the font-size.
 *     If our base font size (euiFontSize) is 16, and our baseline is 4. To ensure the
 *     text stays on the baseline, we pass a multiplier to calculate a line-height.
 * @param scale - The font scale key
 * @param theme - Requires the `base` and `font` keys
 * @param measurement - The returned string measurement
 * *
 * @returns string - Calculated line-height value aligned to baseline
 */


function euiLineHeightFromBaseline(scale, _ref2) {
  var base = _ref2.base,
      font = _ref2.font;
  var measurement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'rem';
  var baseline = font.baseline,
      body = font.body,
      lineHeightMultiplier = font.lineHeightMultiplier;
  var numerator = base * font.scale[scale];
  var denominator = base * font.scale[body.scale];

  var _lineHeightMultiplier = numerator <= base ? lineHeightMultiplier : lineHeightMultiplier * 0.833;

  if (measurement === 'em') {
    // Even though the line-height via `em` cannot be determined against the pixel baseline grid;
    // we will assume that typically larger scale font-sizes should have a shorter line-height;
    return _lineHeightMultiplier.toFixed(4).toString();
  }

  var pixelValue = Math.floor(Math.round(numerator * _lineHeightMultiplier) / baseline) * baseline;
  return measurement === 'px' ? "".concat(pixelValue, "px") : "".concat((pixelValue / denominator).toFixed(4), "rem");
}